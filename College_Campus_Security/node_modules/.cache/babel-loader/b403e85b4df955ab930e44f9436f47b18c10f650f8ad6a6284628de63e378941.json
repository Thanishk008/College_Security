{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thani\\\\Documents\\\\final_project\\\\major_project_2\\\\src\\\\Screens\\\\Scan.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n// import Webcam from 'react-webcam';\n// import Quagga from 'quagga';\n\n// const Scan = () => {\n//   const webcamRef = useRef(null);\n\n//   useEffect(() => {\n//     const runBarcodeDetection = async () => {\n//       Quagga.init(\n//         {\n//           inputStream: {\n//             name: 'Live',\n//             type: 'LiveStream',\n//             target: webcamRef.current.video,\n//           },\n//           decoder: {\n//             readers: ['ean_reader'], // Specify the barcode types you want to detect\n//           },\n//           locate: true, // Enable locating the barcode on the image\n//         },\n//         (err) => {\n//           if (err) {\n//             console.error(err);\n//             return;\n//           }\n//           Quagga.start();\n//         }\n//       );\n\n//       Quagga.onDetected((data) => {\n//         // Display an alert with the extracted barcode data\n//         const userInput = prompt(`Detected Barcode: ${data.codeResult.code}\\nIs it correct? (yes/no)`);\n\n//         // Perform actions based on user input\n//         if (userInput && userInput.toLowerCase() === 'yes') {\n//           console.log('User confirmed. Performing action...');\n//           // Add your specific action for 'yes' here\n//         } else {\n//           console.log('User denied or provided invalid input.');\n//           // Add your specific action for 'no' or invalid input here\n//         }\n\n//         // Stop barcode detection after user interaction\n//         Quagga.stop();\n//       });\n\n//       // Draw bounding boxes around detected barcodes\n//       Quagga.onProcessed((result) => {\n//         const drawingCtx = Quagga.canvas.ctx.overlay;\n//         const drawingCanvas = Quagga.canvas.dom.overlay;\n\n//         if (result) {\n//           if (result.boxes) {\n//             drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));\n//             result.boxes.filter((box) => box !== result.box).forEach((box) => {\n//               Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: 'green', lineWidth: 2 });\n//             });\n//           }\n\n//           if (result.box) {\n//             Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: 'blue', lineWidth: 2 });\n//           }\n\n//           if (result.codeResult && result.codeResult.code) {\n//             Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\n//           }\n//         }\n//       });\n\n//       return () => Quagga.stop();\n//     };\n\n//     runBarcodeDetection();\n//   }, []);\n\n//   return (\n//     <div>\n//       <Webcam\n//         audio={false}\n//         ref={webcamRef}\n//         screenshotFormat=\"image/jpeg\"\n//         width={640}\n//         height={480}\n//         mirrored={true}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Scan;\n\nimport React, { useEffect, useState } from \"react\";\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Scan() {\n  _s();\n  const [scanResult, setScanResult] = useState(\"\");\n  useEffect(() => {\n    const scanner = new Html5QrcodeScanner(\"reader\", {\n      qrbox: {\n        width: 250,\n        height: 250\n      },\n      fps: 5\n    });\n    scanner.render(success, error);\n    function success(result) {\n      scanner.clear();\n      setScanResult(result);\n    }\n    function error(error) {\n      console.warn(error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this), scanResult ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Success: \", scanResult]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"reader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 56\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(Scan, \"9FES/bwjUkdY2/LmF1ZBXlC21Uo=\");\n_c = Scan;\nexport default Scan;\nvar _c;\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"names":["React","useEffect","useState","Html5QrcodeScanner","jsxDEV","_jsxDEV","Scan","_s","scanResult","setScanResult","scanner","qrbox","width","height","fps","render","success","error","result","clear","console","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/Thani/Documents/final_project/major_project_2/src/Screens/Scan.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\r\n// import Webcam from 'react-webcam';\r\n// import Quagga from 'quagga';\r\n\r\n// const Scan = () => {\r\n//   const webcamRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const runBarcodeDetection = async () => {\r\n//       Quagga.init(\r\n//         {\r\n//           inputStream: {\r\n//             name: 'Live',\r\n//             type: 'LiveStream',\r\n//             target: webcamRef.current.video,\r\n//           },\r\n//           decoder: {\r\n//             readers: ['ean_reader'], // Specify the barcode types you want to detect\r\n//           },\r\n//           locate: true, // Enable locating the barcode on the image\r\n//         },\r\n//         (err) => {\r\n//           if (err) {\r\n//             console.error(err);\r\n//             return;\r\n//           }\r\n//           Quagga.start();\r\n//         }\r\n//       );\r\n\r\n//       Quagga.onDetected((data) => {\r\n//         // Display an alert with the extracted barcode data\r\n//         const userInput = prompt(`Detected Barcode: ${data.codeResult.code}\\nIs it correct? (yes/no)`);\r\n\r\n//         // Perform actions based on user input\r\n//         if (userInput && userInput.toLowerCase() === 'yes') {\r\n//           console.log('User confirmed. Performing action...');\r\n//           // Add your specific action for 'yes' here\r\n//         } else {\r\n//           console.log('User denied or provided invalid input.');\r\n//           // Add your specific action for 'no' or invalid input here\r\n//         }\r\n\r\n//         // Stop barcode detection after user interaction\r\n//         Quagga.stop();\r\n//       });\r\n\r\n//       // Draw bounding boxes around detected barcodes\r\n//       Quagga.onProcessed((result) => {\r\n//         const drawingCtx = Quagga.canvas.ctx.overlay;\r\n//         const drawingCanvas = Quagga.canvas.dom.overlay;\r\n\r\n//         if (result) {\r\n//           if (result.boxes) {\r\n//             drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));\r\n//             result.boxes.filter((box) => box !== result.box).forEach((box) => {\r\n//               Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: 'green', lineWidth: 2 });\r\n//             });\r\n//           }\r\n\r\n//           if (result.box) {\r\n//             Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: 'blue', lineWidth: 2 });\r\n//           }\r\n\r\n//           if (result.codeResult && result.codeResult.code) {\r\n//             Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       return () => Quagga.stop();\r\n//     };\r\n\r\n//     runBarcodeDetection();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <Webcam\r\n//         audio={false}\r\n//         ref={webcamRef}\r\n//         screenshotFormat=\"image/jpeg\"\r\n//         width={640}\r\n//         height={480}\r\n//         mirrored={true}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Scan;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\r\n\r\nfunction Scan() {\r\n  const [scanResult, setScanResult] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const scanner = new Html5QrcodeScanner(\"reader\", {\r\n      qrbox: {\r\n        width: 250,\r\n        height: 250,\r\n      },\r\n      fps: 5,\r\n    });\r\n\r\n    scanner.render(success, error);\r\n\r\n    function success(result) {\r\n      scanner.clear();\r\n      setScanResult(result);\r\n    }\r\n    function error(error) {\r\n      console.warn(error);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container my-4\">\r\n    <div>\r\n      <h1>Scan</h1>\r\n      {scanResult ? <div>Success: {scanResult}</div> : <div id=\"reader\"></div>}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Scan;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,kBAAkB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMS,OAAO,GAAG,IAAIP,kBAAkB,CAAC,QAAQ,EAAE;MAC/CQ,KAAK,EAAE;QACLC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE;MACV,CAAC;MACDC,GAAG,EAAE;IACP,CAAC,CAAC;IAEFJ,OAAO,CAACK,MAAM,CAACC,OAAO,EAAEC,KAAK,CAAC;IAE9B,SAASD,OAAOA,CAACE,MAAM,EAAE;MACvBR,OAAO,CAACS,KAAK,CAAC,CAAC;MACfV,aAAa,CAACS,MAAM,CAAC;IACvB;IACA,SAASD,KAAKA,CAACA,KAAK,EAAE;MACpBG,OAAO,CAACC,IAAI,CAACJ,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAKiB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC/BlB,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACZnB,UAAU,gBAAGH,OAAA;QAAAkB,QAAA,GAAK,WAAS,EAACf,UAAU;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,gBAAGtB,OAAA;QAAKuB,EAAE,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACpB,EAAA,CA/BQD,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AAgCb,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}